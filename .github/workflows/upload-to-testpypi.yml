# Performs package tests on the latest versions of Ubuntu, Mac and Windows
# Uploads package to TEST PyPi.

name: TEST PyPI- Run package tests and upload to TEST PyPi

# Runs whenever a push is made to main
# Will give an error if version isn't updated in setup.py
on:
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# The workflow itself
jobs:

  cleanup-runs:
    runs-on: ubuntu-latest
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@master
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  build-and-test:
    runs-on: ${{ matrix.os }}
    needs: cleanup-runs
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.6, 3.7, 3.8, 3.9 ]
        os: [ ubuntu-latest, macOS-latest, windows-latest ]

    steps:
      - uses: actions/checkout@v1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade coverage
          python -m pip install -e ".[d]"

      # Tests with unittest
      - name: Test with unittest
        run: |
          cd tests
          python -m unittest discover
          cd ..

  # The job that runs on Ubuntu with the latest version of Python and
  #   actually does the deploying.
  build-and-publish-to-test-pypi:
    needs: build-and-test
    name: Build and Publish to TEST PyPi
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Build package and deploy to TEST PyPi
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e ".[d]"
          python -m pip install setuptools wheel twine
          pip install -r requirements.txt
          python setup.py install

      # Upload to TestPyPI
      - name: Build and Upload to TestPyPI (Linux Only)
        run: |
          python setup.py sdist bdist_wheel
          python -m twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_TEST_TOKEN }}
          TWINE_REPOSITORY: testpypi
